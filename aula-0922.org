#+title: aula 02

- dúvidas

* conteúdo

capitulo 1:

- processando listas

- indução e recursão. See
  https://math.stackexchange.com/questions/228863/recursive-vs-inductive-definition


#+BEGIN_EXAMPLE
(foldr f e . map g) [1,2,3] =
foldr f e (map g [1,2,3]) =
foldr f e [g 1, g 2, g 3] =
f (g 1) (foldr f e [g 2, g 3]) =
f (g 1) (f (g 2) (foldr f e [g 3]) =
f (g 1) (f (g 2) (f (g 3) (foldr f e []))) =
f (g 1) (f (g 2) (f (g 3) e)) =

foldr (f.g) e [1,2,3] =
f.g 1 (foldr f.g e [2,3]) =
f.g 1 (f.g 2 (foldr f.g e [3]) =
f.g 1 (f.g 2 (f.g 3 (foldr f.g e []))) =
f.g 1 (f.g 2 (f.g 3 e)) =
#+END_EXAMPLE


#+BEGIN_EXAMPLE
h :: b -> b
g :: a -> b -> a
f :: a -> b -> a
e :: b

h (foldr f e [a]) = foldr g (h e) [a]
#+END_EXAMPLE


#+BEGIN_EXAMPLE
h = (\x -> x * 10)
g = (\x y -> x * 10 + y)
f = (+)

foldr g (h 0) [1,2,3] = h (foldr f 0 [1,2,3]) = 60
#+END_EXAMPLE


#+BEGIN_SRC 
collapse [[−2,1],[−3],[2,4]] = 
help [] [[−2,1],[−3],[2,4]] = 
help ([] ++ [−2,1]) (tail [[−2,1],[−3],[2,4]]) = 
help [−2,1] [[−3],[2,4]] = 
help [-2,1,-3] [[2,4]] = ...
#+END_SRC


capitulo 2

- Asymptotic notation
- Estimating running times
- Running times in context
- Amortised running times

* exercícios sugeridos

1.10
1.11
1.15
1.21
2.5
2.14
2.15
